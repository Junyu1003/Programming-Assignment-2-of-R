## This script implements caching for matrix inversion.
## The goal is to avoid recomputing the inverse of the same matrix multiple times,
## which can be computationally expensive for large matrices.

## The `makeCacheMatrix` function creates a special "matrix" object that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
        j <- NULL  # Initialize the cache variable for storing the inverse matrix
        
        ## Function to set a new matrix and reset the inverse cache
        set <- function(y){
                x <<- y  # Assign new matrix
                j <<- NULL  # Clear cached inverse since the matrix has changed
        }
        
        ## Function to get the current matrix
        get <- function() x
        
        ## Function to set (cache) the inverse matrix
        setInverse <- function(inverse) j <<- inverse
        
        ## Function to get the cached inverse matrix (if available)
        getInverse <- function() j 
        
        ## Return a list of the defined functions, allowing external access
        list(set = set, get = get, 
             setInverse = setInverse, 
             getInverse = getInverse)
}


## The `cacheSolve` function computes the inverse of the special "matrix" created with makeCacheMatrix.
## If the inverse has already been calculated (and the matrix has not changed),
## then it retrieves the cached inverse instead of recomputing it.
cacheSolve <- function(x, ...) {
        ## Retrieve the cached inverse matrix if available
        j <- x$getInverse()
        
        ## If the inverse is already cached, return it to save computation time
        if(!is.null(j)){
                message("getting cached data")
                return(j)
        }
        
        ## If the inverse is not cached, compute it
        mat <- x$get()  # Retrieve the matrix
        j <- solve(mat, ...)  # Compute the inverse
        x$setInverse(j)  # Cache the computed inverse
        
        ## Return the computed inverse matrix
        j
}

